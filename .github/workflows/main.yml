name: Release

on:
  create:
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: write

jobs:
  package:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        config: [release]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: '0'

    - uses: benjlevesque/short-sha@v1.2
      id: short-sha
      with:
        length: 7

    - uses: battila7/get-version-action@v2
      id: get_version

    - name: configure_macos
      if: matrix.os == 'macos-latest'
      run: mkdir build && cd build && cmake -G Xcode .. "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"

    - name: configure_windows
      if: matrix.os == 'windows-latest'
      run: mkdir build && cd build && cmake ..

    - name: build_release
      if: matrix.config == 'release'
      run: cmake --build build --config 'Release'

    - name: codesign macOS external
      if: matrix.os == 'macos-latest'
      run: |
        find build -name "voice-alligator.mxo" -exec codesign --force --deep -s - {} \;

    - name: test
      run: cd build && ctest -C ${{ matrix.config }} . -V

    - name: package_macos
      if: matrix.os == 'macos-latest'
      env:
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_CONFIG: ${{ matrix.config }}
      run: |
        PACKAGE_NAME=`echo $GITHUB_REPOSITORY | sed 's/.*\///g'`
        mkdir -p $PACKAGE_NAME/externals
        if [ -e package-info.json ]; then cp package-info.json $PACKAGE_NAME; fi
        for f in *.md; do [ -e "$f" ] && cp "$f" $PACKAGE_NAME ; done
        if [ -e icon.png ]; then cp icon.png $PACKAGE_NAME; fi
        if [ -e CMakeLists.txt ]; then cp CMakeLists.txt $PACKAGE_NAME; fi
        if [ -d extensions ]; then cp -r extensions $PACKAGE_NAME; fi
        # copy only .mxo files from mac build (recursive)
        if [ -d externals ]; then cp -v externals/*.mxo $PACKAGE_NAME/externals/ || true; fi
        find build -type f -name "*.mxo" -exec cp -v {} $PACKAGE_NAME/externals/ \;
        if [ -d support ]; then cp -r support $PACKAGE_NAME; fi
        if [ -d docs ]; then cp -r docs $PACKAGE_NAME; fi
        if [ -d examples ]; then cp -r examples $PACKAGE_NAME; fi
        if [ -d patchers ]; then cp -r patchers $PACKAGE_NAME; fi
        if [ -d help ]; then cp -r help $PACKAGE_NAME; fi

    - name: package_windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      env:
        GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
      run: |
        set PACKAGE_NAME=%GITHUB_REPOSITORY_NAME%
        mkdir %PACKAGE_NAME%\externals
        if exist extensions xcopy extensions %PACKAGE_NAME%\extensions /E /I /Y
        rem copy only .mxe64 files from windows build (recursive)
        if exist externals (
          echo Copying Windows externals...
          xcopy externals\\*.mxe64 %PACKAGE_NAME%\\externals\\ /Y
        )
        if exist support xcopy support %PACKAGE_NAME%\support /E /I /Y
        if exist patchers xcopy patchers %PACKAGE_NAME%\patchers /E /I /Y
        if exist help xcopy help %PACKAGE_NAME%\help /E /I /Y

    - uses: actions/upload-artifact@v4
      with:
        name: package-artifacts-${{ matrix.os }}
        path: ${{ github.event.repository.name }}

  release:
    runs-on: ubuntu-latest
    needs: package

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'
        fetch-depth: '0'

    - uses: battila7/get-version-action@v2
      id: get_version

    - uses: actions/download-artifact@v4.1.7
      with:
        name: package-artifacts-macos-latest
        path: voice-alligator-package

    - uses: actions/download-artifact@v4.1.7
      with:
        name: package-artifacts-windows-latest
        path: voice-alligator-package

    - name: Copy package-info.json
      run: cp package-info.json voice-alligator-package/

    - name: Display structure of downloaded files
      run: ls -R
      working-directory: voice-alligator-package

    - name: zip
      run: zip -r ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}.zip voice-alligator-package

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ github.event.repository.name }}-${{ steps.get_version.outputs.version }}-zipped-release
        path: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}.zip

    - uses: ncipollo/release-action@v1
      with:
        artifacts: ${{ github.event.repository.name }}-package-for-max-${{ steps.get_version.outputs.version }}.zip
        body: "Max Package for all supported platforms"
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ steps.get_version.outputs.version }}